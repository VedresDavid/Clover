@page "/"
@inject LocalizationService localization
@inject CaseService caseService
@inject NavigationManager navigationManager
@inject ItemService itemService
@inject IModalService modalService
<!--buttons-->
<div class="btn btn-primary" @onclick="CreateCase">@localization.localizations.NewCase</div>
<div class="btn-group" role="group">
    <div class="btn btn-danger" @onclick="DeleteAllCases">@localization.localizations.DeleteAllCases</div>
    <div class="btn btn-secondary disabled">@deleteAllCasesCounter</div>
    <span style="margin:5px;"></span>
</div>
@if (localization.GetLocale() == LocaleEnum.HuHu)
{
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-success" @onclick="localization.SetHungarianLanguage">@localization.localizations.Hungarian</button>
        <button type="button" class="btn btn-primary" @onclick="localization.SetEnglishLanguage">@localization.localizations.English</button>
    </div>
}
else if (localization.GetLocale() == LocaleEnum.EnUs)
{
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-primary" @onclick="localization.SetHungarianLanguage">@localization.localizations.Hungarian</button>
        <button type="button" class="btn btn-success" @onclick="localization.SetEnglishLanguage">@localization.localizations.English</button>
    </div>
}
else
{
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-primary" @onclick="localization.SetHungarianLanguage">@localization.localizations.Hungarian</button>
        <button type="button" class="btn btn-primary" @onclick="localization.SetEnglishLanguage">@localization.localizations.English</button>
    </div>
}
<br />
<br />
<!--add case form-->
<div class="form-group">
    <label>@localization.localizations.CaseNumber</label>
    @if (string.IsNullOrWhiteSpace(newCase.CaseNumber) && isAddCaseClicked)
    {
        <!--if the case name is empty or only whitespaces-->
        <input type="text" class="form-control is-invalid" @bind="newCase.CaseNumber" />
        <label style="color:red;">@localization.localizations.CaseNumberValidation</label>
        <br />
    }
    else if (isAddCaseClicked && !(CaseService.IsCaseNameValid(newCase.CaseNumber)) && !isNewCaseAdded)
    {
        <!--if a case with the same case name already exists-->
        <input type="text" class="form-control is-invalid" @bind="newCase.CaseNumber" />
        <label style="color:red;">@localization.localizations.CaseNameAlreadyExists</label>
        <br />
    }
    else if (isAddCaseClicked && (CaseService.IsCaseNameValid(newCase.CaseNumber)))
    {
        <!--if the case is valid-->
        <input type="text" class="form-control is-valid" @bind="newCase.CaseNumber" />
        <br />
    }
    else
    {
        <!--default-->
        <input type="text" class="form-control" @bind="newCase.CaseNumber" />
        <br />
    }
    <label>@localization.localizations.Comment</label>
    <input type="text" class="form-control" @bind="newCase.Comment" />
</div>
<br />
<br />
<!--cases table-->
<div class="input-group">
    <div class="input-group-append">
        <div class="input-group-text oi oi-magnifying-glass" @onclick="GetCases"></div>
    </div>
    <input type="text" class="form-control" @bind="searchText" />
</div>
<br />
<table class="table table-striped table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th @onclick="OrderByCaseNumber">@localization.localizations.CaseNumber</th>
            <th @onclick="OrderByNumberOfItems">@localization.localizations.NumberOfItems</th>
            <th @onclick="OrderBySum">@localization.localizations.Sum</th>
            <th @onclick="OrderByComment">@localization.localizations.Comment</th>
            <th>@localization.localizations.Operations</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var _case in cases)
        {
            <tr>
                <td @onclick="@(() => OpenItems(_case.CaseNumber))">@_case.CaseNumber</td>
                <td>@_case.NumberOfItems</td>
                <td>@_case.Sum</td>
                <td>@_case.Comment</td>
                <td>
                    <span class="btn btn-danger oi oi-trash" @onclick="@(() => DeleteCase(_case.CaseNumber))">@localization.localizations.Delete</span>
                    <span class="btn btn-primary oi oi-list" @onclick="@(() => ModifyCase(_case))">@localization.localizations.Modify</span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    public bool isNewCaseAdded = false;

    public CaseOrderEnum caseOrder = CaseOrderEnum.CaseNumberAscending;

    public string searchText = "";

    public int deleteAllCasesCounter = 10;

    //makes the case number validation error not pop up on page load
    public bool isAddCaseClicked = false;

    public Case newCase = new Case();

    public List<Case> cases = new List<Case>();

    //runs when the page loads
    protected override async Task OnInitializedAsync()
    {
        await GetCases();
        await localization.GetLocalizations();
    }

    public async Task OrderByCaseNumber()
    {
        if (caseOrder == CaseOrderEnum.CaseNumberAscending)
        {
            FlipOrder();
            await GetCases();
        }
        else
        {
            caseOrder = CaseOrderEnum.CaseNumberAscending;
            await GetCases();
        }
    }

    public async Task OrderByNumberOfItems()
    {
        if (caseOrder == CaseOrderEnum.NumberOfItemsAscending)
        {
            FlipOrder();
            await GetCases();
        }
        else
        {
            caseOrder = CaseOrderEnum.NumberOfItemsAscending;
            await GetCases();
        }
    }

    public async Task OrderBySum()
    {
        if (caseOrder == CaseOrderEnum.SumAscending)
        {
            FlipOrder();
            await GetCases();
        }
        else
        {
            caseOrder = CaseOrderEnum.SumAscending;
            await GetCases();
        }
    }

    public async Task OrderByComment()
    {
        if (caseOrder == CaseOrderEnum.CommentAscending)
        {
            FlipOrder();
            await GetCases();
        }
        else
        {
            caseOrder = CaseOrderEnum.CommentAscending;
            await GetCases();
        }
    }

    public void ModifyCase(Case _case)
    {
        var parameters = new ModalParameters();
        parameters.Add("_case", _case);
        modalService.Show<ModifyCaseModal>(localization.localizations.Modify, parameters);
        modalService.OnClose += ModifyCaseModalClosed;
    }

    public void ModifyCaseModalClosed(ModalResult result)
    {
        GetCases();
        this.StateHasChanged();
        modalService.OnClose -= ModifyCaseModalClosed;
    }

    public void FlipOrder()
    {
        switch (caseOrder)
        {
            case CaseOrderEnum.CaseNumberAscending:
                caseOrder = CaseOrderEnum.CaseNumberDescending;
                break;
            case CaseOrderEnum.NumberOfItemsAscending:
                caseOrder = CaseOrderEnum.NumberOfItemsDescending;
                break;
            case CaseOrderEnum.SumAscending:
                caseOrder = CaseOrderEnum.SumDescending;
                break;
            case CaseOrderEnum.CommentAscending:
                caseOrder = CaseOrderEnum.CommentDescending;
                break;
            case CaseOrderEnum.CaseNumberDescending:
                caseOrder = CaseOrderEnum.CaseNumberAscending;
                break;
            case CaseOrderEnum.NumberOfItemsDescending:
                caseOrder = CaseOrderEnum.NumberOfItemsAscending;
                break;
            case CaseOrderEnum.SumDescending:
                caseOrder = CaseOrderEnum.SumAscending;
                break;
            case CaseOrderEnum.CommentDescending:
                caseOrder = CaseOrderEnum.CommentAscending;
                break;
            default:
                caseOrder = CaseOrderEnum.CaseNumberAscending;
                break;
        }
    }

    public async Task GetCases()
    {
        cases = await caseService.GetCases(caseOrder, searchText);
    }

    public void OpenItems(string caseNumber)
    {
        navigationManager.NavigateTo($"/items/{caseNumber}");
    }

    public async Task CreateCase()
    {
        isAddCaseClicked = true;
        if (!(string.IsNullOrWhiteSpace(newCase.CaseNumber) || !CaseService.IsCaseNameValid(newCase.CaseNumber)))
        {
            isNewCaseAdded = true;
            await caseService.CreateCase(newCase);
        }
        else
        {
            isNewCaseAdded = false;
        }
        await GetCases();
    }

    public async Task DeleteCase(string caseNumber)
    {
        await caseService.DeleteCase(caseNumber);
        await GetCases();
    }

    public async Task DeleteAllCases()
    {
        if (deleteAllCasesCounter >= 1)
        {
            deleteAllCasesCounter--;
            return;
        }
        deleteAllCasesCounter = 10;
        await caseService.DeleteAllCases();
        await GetCases();
    }
}